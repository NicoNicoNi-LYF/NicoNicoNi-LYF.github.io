<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>练习项目</title>
      <link href="/2020/05/18/lian-xi-xiang-mu/"/>
      <url>/2020/05/18/lian-xi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="网页项目"><a href="#网页项目" class="headerlink" title="网页项目"></a>网页项目</h2><h3 id="固定栏"><a href="#固定栏" class="headerlink" title="固定栏"></a>固定栏</h3><img src="/2020/05/18/lian-xi-xiang-mu/%E5%9B%BA%E5%AE%9A%E6%A0%8F.png" class="" title="网页收藏夹"><a id="more"></a><p>More info: <a href="https://niconiconi-lyf.github.io/ZONE/固定栏/" title="小型狂犬">固定栏</a></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>More info: <a href="https://niconiconi-lyf.github.io/ZONE/表格生成器/" title="项目地址:https://github.com/yelog/TableGenerator">表格生成器</a><br>More info: <a href="https://niconiconi-lyf.github.io/ZONE/机器学习测试/" title="项目地址:https://github.com/TommyLemon/APIAuto">机器学习测试</a></p><!-- 想知道一个网页的具体路径 去public文件夹下看 index的路径 如:固定栏的本地路径    localhost:4000/ZONE/固定栏/-->]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现输出指定范围的素数/质数</title>
      <link href="/2020/05/17/c-yu-yan-shi-xian-shu-chu-zhi-ding-fan-wei-de-zhi-shu/"/>
      <url>/2020/05/17/c-yu-yan-shi-xian-shu-chu-zhi-ding-fan-wei-de-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="穷举素数"><a href="#穷举素数" class="headerlink" title="穷举素数"></a>穷举素数</h2><h3 id="Outdated：主函数中实现"><a href="#Outdated：主函数中实现" class="headerlink" title="Outdated：主函数中实现"></a>Outdated：主函数中实现</h3><p><strong>思路：</strong><br>1.判断区间为3～sqrt（本身）<br>2.排除偶数//被判断数和判断数中都排除</p><a id="more"></a><h4 id="一-素数在数组中顺序存储"><a href="#一-素数在数组中顺序存储" class="headerlink" title="一.素数在数组中顺序存储"></a>一.素数在数组中顺序存储</h4><pre class=" language-C++"><code class="language-C++">#include<stdio.h>#include<math.h>#define swap(a,b){a=a^b;b=a^b;a=a^b;}//定义数字交换的宏int main(void) {    int sub=1,sqr;//定义sub记录下标,从1开始;定义sqr缩小判断范围   const int N=1000;    printf("输出2-%d之间的素数\n",N);    int prime[N]={2,0};//定义数组存放素数,除prime[0]外全部初始化为0    for(int i=3;i<=N;i+=2){//判断从3到N的奇数,排除大于2偶数        // if(i%2==0) continue;//如果i为2的倍数,不是素数,继续下次循环 i++时        sqr=sqrt(i);        int flag=0;        for(int j=3;j<=sqr;j+=2){//判断从3到sqr的奇数是否能整除i            if(i%j==0) {                flag=1;                break;            }        }        if(flag) continue;//如果能被整除,跳过该循环        prime[sub++]=i;    }    for(int i=0;i<sub;i++)        printf("%d\t",prime[i]);    puts("");    return (0);}</code></pre><h4 id="二-素数与数组下标相同"><a href="#二-素数与数组下标相同" class="headerlink" title="二.素数与数组下标相同"></a>二.素数与数组下标相同</h4><pre class=" language-C++"><code class="language-C++">#include<stdio.h>#include<math.h>#define swap(a,b){a=a^b;b=a^b;a=a^b;}//定义数字交换的宏int main(void) {    int sqr;//从1开始;定义sqr缩小判断范围    const int N=1000;    printf("输出2-%d之间的素数\n",N);    int prime[N+1]={0,0,2,0};//定义数组存放素数,除prime[2]外全部初始化为0    for(int i=3;i<=N;i+=2){//判断从3到N的奇数,排除大于2偶数       // if(i%2==0) continue;//如果i为2的倍数,不是素数,继续下次循环 i++时用        sqr=sqrt(i);        int flag=0;        for(int j=3;j<=sqr;j+=2){//判断从3到sqr的奇数是否能整除i            if(i%j==0) {                flag=1;                break;            }        }        if(flag) continue;//如果能被整除,跳过该循环        prime[i]=i;    }    for(int i=0;i<=N;i++)        if(prime[i]!=0)            printf("%d\t",prime[i]);    puts("");    return (0);}</code></pre><h3 id="新版本：主函数中实现"><a href="#新版本：主函数中实现" class="headerlink" title="新版本：主函数中实现"></a>新版本：主函数中实现</h3><p><strong>思路：</strong><br>1.大于2的偶数都不是质数，只对奇数进行整除判断<br>2.只整除小于等于no的平方根的质数//由长方形面积和约数</p><p><img src="https://img-blog.csdnimg.cn/20191113210638654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzcxNTkx,size_16,color_FFFFFF,t_70" alt="算法依据"></p><pre class=" language-C++"><code class="language-C++">#include<stdio.h>int *prime(int n){    int prime[100000]={0};//数组元素个数可以扩展    int ptr =0;    prime[ptr++]=2;    prime[ptr++]=3;    for(int no=5;no<=n;no+=2){//大于2的偶数都不是质数        int flag=0;        for(int i=1;prime[i]*prime[i]<=no;i++){//只整除小于等于no的平方根的质数            if (no%prime[i]==0) {                flag=1;                break;            }        }        if(!flag)            prime[ptr++]=no;    }    return prime;}int main(void) {    const int N=100000;//求N及以下的素数    int *a=prime(N);    int counter=0;    for(int i=0;i<N/2;i++){//素数个数不会大于N/2        if(a[i]==0) break;//遇到0,则后面皆为0 跳出        printf("%d\t",a[i]);        counter++;    }    printf("\n\t1~%d的素数y个数为:%d\n",N,counter);//测速时可以注释掉输出    return (0);}</code></pre><h2 id="算法性能直观测试"><a href="#算法性能直观测试" class="headerlink" title="算法性能直观测试"></a>算法性能直观测试</h2><p><strong>可以将主函数体放置于下面的代码测试</strong>不同算法的性能**</p><pre class=" language-java"><code class="language-java">#include <span class="token operator">&lt;</span>ctime<span class="token operator">></span><span class="token comment" spellcheck="true">//需要额外添加该编译预处理指令</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tstart <span class="token punctuation">,</span>tstop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分别记录起始和结束时间</span>    <span class="token comment" spellcheck="true">//测试函数花费时间</span>    tstart<span class="token operator">=</span><span class="token function">clock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ····················须测速代码    tstop<span class="token operator">=</span><span class="token function">clock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"花费时间(ms):%d\n"</span><span class="token punctuation">,</span>tstop<span class="token operator">-</span> tstart<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ms为单位</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不会真的有人不喜欢小弥子吧,不会吧不会吧</title>
      <link href="/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/"/>
      <url>/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/</url>
      
        <content type="html"><![CDATA[<img src="/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/%E5%B0%8F%E5%BC%A5%E5%AD%90-3.JP2" class="" title="This is an image"><h2 id="能看见会动的小弥子我就很满足了"><a href="#能看见会动的小弥子我就很满足了" class="headerlink" title="能看见会动的小弥子我就很满足了"></a>能看见会动的小弥子我就很满足了</h2><p><a href="https://www.bilibili.com/bangumi/media/md28228367/?from=search&seid=17727143985441335469" target="_blank" rel="noopener" title="小型狂犬">mikomikomi</a></p><a id="more"></a><img src="/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/%E5%B0%8F%E5%BC%A5%E5%AD%90-1.JP2" class=""><img src="/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/%E5%B0%8F%E5%BC%A5%E5%AD%90-4.JPG" class=""><img src="/2020/05/11/bu-hui-zhen-de-you-ren-bu-xi-huan-xiao-mi-zi-ba-bu-hui-ba-bu-hui-ba/%E5%B0%8F%E5%BC%A5%E5%AD%90-2.JP2" class=""><!-- 首页不能看见![](小弥子-1.JP2)![](小弥子-2.JP2)![](小弥子-3.JP2)![](小弥子-4.JPG)-->]]></content>
      
      
      <categories>
          
          <category> ACG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 老婆 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
